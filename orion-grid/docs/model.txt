Компонента Grid взаимодействует с базой данных помощью класса, 
реализующего интерфейс orion.tapestry.grid.lib.model.GridModelInterface
или наследника класса orion.tapestry.grid.lib.model.GridModelAdapter<S>
2 й способ - проще т.к. для создания полноценной модели необходимо 
создать конструктор и реализовать метод

public abstract List<GridRow> getRows() throws RestrictionEditorException;

Остальные методы уже реализованы в классе orion.tapestry.grid.lib.model.GridModelAdapter<S>


Пример реализации "игрушечной" модели данных находится в классе 
orion.tapestry.grid.lib.model.GridModelBeanSample
Так что при создании настоящей модели можно скопировать/изменить этот класс.
Этот класс составляет модель по классу в формате JavaBean,
который описывает сущность в базе данных.

Конструктор GridModelBeanSample(...) составляет список полей таблицы и задаёт их начальные свойства.
Его аргументы - класс сущности forClass, его атрибуты будут колонками в таблице
configuration конфигурация, соответствие между типами данных Java и свойствами колонки.
В модели типа GridModelBeanSample способ отображения атрибута в таблице зависит от его типа или от его имени.
Для каждого атрибута сущности forClass выполняется поиск в конфигурации
сначала по полному пути к атрибуту, потом - по типу атрибута.
Например, если мы имеем класс
my.pack.age.MyClass{
   long id; 
}
то сначала выполняется поиск в конфигурации правил отображения
для атрибута "my.pack.age.MyClass.id"
а потом - поиск для типа long.


Конфгурация задаётся в традиционном для Tapestry стиле:
создаётся метод

public static void contributeTypeMap(MappedConfiguration<String, Class<? extends GridFieldAbstract>> configuration) {
   
}

Пример использования - в классе orion.tapestry.grid.services.CpuGridModule


Чтобы получить доступ к конфигурации, надо в класс страницы добавить атрибут типа GridTypeMap:

@Inject
private GridTypeMap typeMap;

и потом передать переменную typeMap в конструктор модели.




Второй метод, который надо перекрыть, - это 
public List<GridRow> getRows() throws RestrictionEditorException{
...
}

Этот метод возвращает список извлеченных из базы данных строк.

Пример использования - в классе orion.tapestry.grid.lib.hibernate.GridModelHibernateBean
В методе getRows()
1) вычисляется количество найденных строк
2) используется условие фильтрации
3) используется условие сортировки
4) устанавливается номер страницы
5) выбираются строки из БД в виде списка объектов
6) полученный список объектов отображается в список List<GridRow>

Чтобы получить вариант для JPA, стоит скопировать-модифицировать класс 
orion.tapestry.grid.lib.hibernate.GridModelHibernateBean
